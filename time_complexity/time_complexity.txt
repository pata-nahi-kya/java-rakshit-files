
# Complexity - Time and Space

> Notes: Justin Bender 

## What is time and space complexity?

The time and space (memory) required to execute and algorithm, respectively.

## Why do we care?

- Scalability
- Make better decisions
    - Efficiency & tradeoffs
        - Data structures to use
        - Find optimal solutions
    - Common interview topic

## Asymptotic Notations

- Big-O
    - Upperbound (worst case)
- Big-Ω (omega)
    - Lowerbound (best case)
- Big-θ (theta)
    - Tight bound

```
+   
|      Big-O
|     /   _____ Big-θ
|    /   /
|   /  /
|  / /  ________ Big-Ω 
| // __/ 
|///____________ n
```

### Complexities

- Constant: O(1)
- Linear time: O(n)
- Logarithmic time: O(log n)
- Quasilinear time: O(n log n)
- Quadratic time: O(n^2)
- Exponential time: O(c^n)
- Factorial time: O(n!)
- Polynomial-time: O(n^c)

### Example One:

Input: `Array`

Loops (n): `1`

Constants in loop (n * 1): `1`

Constants (+1): `0`

Time Complexity = `n * 1 = O(n)`

### Example Two:

Input: `Array`

Loops (n): `2 separate loops`

Constants in loop (n * 1): `1 each`

Constants (+1): `3`

Time Complexity = `2(n+1) + 3 = O(n)`

### Example Three:

Input: `Array`

Loops (n): `1 loop 1 nested loop`

Constants in loop (n * 1): `0`

Constants (+1): `1`

Time Complexity = `n * n * 1 = n^2 = O(n^2)`

## Evaluation of time and space

- What input is scaling?
- How does that affect
    - the number of computations
    - the amount of memory to allocate
- Drop coefficients and lower order terms
- Watch out for nested operations.
- Understand complexity of
    - helper methods
    - operations data structure

## Time complexity of data structures

- Building blocks of algorithms
- Useful to remember basic operations of: arrays, hash tables, linked list, and trees
    - Access - a specific value
    - Search - find a value
    - Insert - add a value anywhere
    - Delete - remove a value anywhere

### Array Complexities

- Access: O(1) - Ω(1)
```
    |
    V
[0][1][2][3][4]
```
- Find: O(n) - Ω(1)
```
 |  |  |  |
 v  v  v  v
[0][1][2][3][4]
```
- Push (Insert): O(1) - Ω(1)
```
[0][1][2][3][4]<-[5] = [0][1][2][3][4][5]
```
- Shift (Insert): O(n) - Ω(1)
```
    [1]
     |
     v
[0][1][2][3][4] = [0][1][1]->[2]->[3]->[4] = [0][1][1][2][3][4]
```
- Delete: O(n) - Ω(1) In JavaScript it doesn't delete the value. What it does is change the value to undefined. Making it O(1) but the array length stays the same. Not really deleting the value.
```
      [2]
       ^
[0][1] | [3][4] = [0][1]<-[3]<-[4] = [0][1][3][4]
```

## Method calls and data structures

- important to understand time complexity of method calls
- especially ones that perform operations with data structures

### Example Four:

Input: `Array, Array`

Loops (n): `1 loop 1 nested loop`

Constants in loop (n * 1): `1`

Constants (+1): `0`

Time Complexity = `n * m * 1 = mn = O(nm)`

## Multivariable

- Algorithms may have more than one input
- Inputs may have more than one factor that can scale
- Distinguish the factors from one another
    - use different characters to represent each factor
- Evaluate a single factor by scaling one factor at a time.
    - hold other factors constant

## Space Complexity

The memory required to execute an algorithm. 

- Does this include the input?

### Auxiliary Space vs Space Complexity

### Auxiliary Space: 
extra memory required to perform an algorithm

#### Space Complexity: 
the memory required to execute an algorithm which includes both input size as well as auxiliary space.

### Example Five:

Input: `Array`

Loops (n): ``

Constants in loop (n * 1): `1 (linear)`

Constants (+1): `2`

Auxiliary Space = `n + 2 = O(n)`

Space Complexity = `n + n + 2 = 2n + 2 = n = O(n)`

### Example Six:

Input: `Array`

Constants (+1): `1`

Auxiliary Space = `O(1)`

Space Complexity = `n + 1 = O(n)`

### Possible Big-O Orders

- Constant: O(1)
    - independent of input size
    - Examples:
        - Lookup a key in a hashtable
        - Assigning a value
        - Arithmetic calculation
        
- Linear time: O(n)
    - Grows proportional to input size
        - Examples:
            - Looping through a collection of elements
            - Finding an item in the linked list of array

- Logarithmic time: O(logn)
    - Grows logarithmically to input size
    - Examples:
        - Binary search for value in a sorted array
        - Inserting a value in a binary search tree

- Quasilinear time: O(nlogn)
    - Common for comparison sorting algorithms (faster than linear and slower than quadratic)
    - Examples:
        - Mergesort
        - Quicksort
        - Heap sort

- Quadratic time: O(n^2)
    - Grows proportional to the square of the input size
    - Examples:
        - A nested loop
        - Iterating through a matrix
        - Insertion sort

- Exponential time: O(c^n)
    - C is a constant base
        - increasing exponent
    - Example:
        - Multiple recursion algorithms
        - top down fib

- Factorial time: O(n!)
    - Grows proportional to the factorial of the input size
    - Examples:
        - Finding permutations
        - Brute force approach for traveling salesman algorithm

- Polynomial-time: O(n^c)
    - C is some constant power
        - for c = 3, cubic
    - Examples:
        - Deeply nested loops

## Things To Remember

- Important for scaling
- Drop coefficients and lower order terms in O complexity (n + 1 = n)
- Know time complexity of:
    - basic data structures operations
    - native method calls
- Auxiliary space vs Space complexity

## Example functions and complexities

> Drop coefficients and lower order terms
```Javascript
5 + N                 Answer: O(n)
N + N^2               Answer: O(n^2)
15N + 13N             Answer: O(n)
10000                 Answer: O(1)
log(N) + 1            Answer: O(log(n))
log(N) * 3 + 14N + 3  Answer: O(n)
Nlog(N) + 3N^2        Answer: O(n^2)
N^3 + log(N^4)        Answer: O(n^3)
N! + 180000N^2        Answer: O(n!)
15002^N               Answer: O(150002^n)
```
---

```Javascript
function indexOf(arr, target) {
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] === target) {
      return i;
    }
  }
  return -1;
}
```
Time Complexity: `O(n)`

Auxiliary: `O(1)`

Space Complexity: `O(n)`

---

```Javascript
function evens(arr) {
  var results = [];
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] % 2 === 0) {
      results.push(arr[i]);
    }
  }
  return results;
}
```
Time Complexity: O(n)

Auxiliary: O(n)

Space Complexity: O(n)

---
```Javascript
function sum(arr) {
  let total = 0;
  for (let i = 0; i < arr.length; i++) {
    total += arr[i];
  }
  return total;
}
```
Time Complexity: O(n)

Auxiliary: O(1)

Space Complexity: O(n)

---
```Javascript
function merge(arr1, arr2) {
  const totalElements = arr1.length + arr2.length;
  let result = [];
  let i = 0;
  let j = 0;
  while (i + j < totalElements) {
    if (j >= arr2.length || (i < arr1.length && arr1[i] <= arr2[j])) {
      result.push(arr1[i]);
      i++;
    } else {
      result.push(arr2[j]);
      j++;
    }
  }
  return result;
}
```
Time Complexity: O(n + m)

Auxiliary: O(n + m)

Space Complexity: O(n + m)

---
```Javascript
function binarySearch(arr, val) {
  let low = 0;
  let high = arr.length - 1;
  while (low <= high) {
    mid = parseInt((low + high) / 2);
    if (arr[mid] > val) {
      high = mid - 1;
    } else if (arr[mid] < val) {
      low = mid + 1;
    } else {
      return mid;
    }
  }
  return -1;
}
```
Time Complexity: O(logn)

Auxiliary: O(1)

Space Complexity: O(n)

---
```Javascript
function factorial(n) {
  if (n === 1) {
    return 1;
  }
  return n * factorial(n - 1);
}
```
Time Complexity: O(n)

Auxiliary: O(n)

Space Complexity: O(n)

---
```Javascript
function firstTimesLast(arr) {
  let result = null;
  if (arr.length < 2) {
    return result;
  }
  result = arr[0] * arr[arr.length - 1];
  return result;
}
```
Time Complexity: O(1)

Auxiliary: O(1)

Space Complexity: O(1)

---
```Javascript
function mostFrequentOccurrence(str) {
  const lowerString = str.toLowerCase();
  let letters = {};
  let mostFrequent;

  for (let i = 0; i < lowerString.length; i++) {
    let char = str[i].toLowerCase();
    if (letters[char]) {
      letters[char]++;
    } else {
      letters[char] = 1;
    }
  }

  for (let key in letters) {
    if (!mostFrequent || letters[key] > mostFrequent[1]) {
      mostFrequent = [key, letters[key]];
    }
  }

  return mostFrequent[0];
}
```
Time Complexity: O(n^2)

Auxiliary: O(1)

Space Complexity: O(1) - if there are 26 characters possible

---
```Javascript
function printUnorderedPairs(array) {
  for (let i = 0; i < array.length; i++) {
    for (let j = i + 1; j < array.length; j++) {
      console.log(array[i] + "," + array[j]);
    }
  }
}
```
Time Complexity: O(n^2)

Auxiliary: O(1)

Space Complexity: O(n)

---
```Javascript
function makeCombinedMatrix(arr1, arr2) {
  let result = [];
  let row;

  for (let i = 0; i < arr1.length; i++) {
    row = [];
    for (let j = 0; j < arr2.length; j++) {
      row.push(arr1[i] + arr2[j]);
    }
    result.push(row);
  }
  return result;
}
```
Time Complexity: O(mn)

Auxiliary: O(mn)

Space Complexity: O(mn)

---
```Javascript
function nthFibonacci(n) {
  let result = [0, 1];
  for (let i = 1; i < n; i++) {
    result[i + 1] = result[i] + result[i - 1];
  }
  return result[n];
}
```
Time Complexity: O(n)

Auxiliary: O(n)

Space Complexity: O(n)

---
```Javascript
function nthFibonacci(n) {
  let cache = {};

  function searchFib(index) {
    if (cache[index]) {
      return cache[index];
    }
    if (index < 2) {
      return index;
    }
    let result = searchFib(index - 1) + searchFib(index - 2);
    cache[index] = result;
    return cache[index];
  }

  return searchFib(n);
}
```
Time Complexity: O(n)

Auxiliary: O(n)

Space Complexity: O(n)

---
